package service;

import jakarta.mail.*;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import java.io.UnsupportedEncodingException;
import model.OrderDetails;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import model.Order;
import model.User;

public class MailService {

//    private static final String EMAIL_SENDER = WebConfigLoader.getProperty("email.sender");
//    private static final String EMAIL_PASSWORD = WebConfigLoader.getProperty("email.password");
    private static final String EMAIL_SENDER = "de180497luongdanghoangluu@gmail.com";
    private static final String EMAIL_PASSWORD = "lryj mowk yoml wvhw";
    private static final Map<String, String> otpStore = new ConcurrentHashMap<>();
    private static final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

    ProductVariantService productVariantService = new ProductVariantService();

    public String generateOTP(String email) {
        String otp = String.format("%04d", new Random().nextInt(10000)); // T·∫°o m√£ 4 s·ªë

        otpStore.put(email, otp); // L∆∞u OTP t·∫°m th·ªùi

        // T·ª± ƒë·ªông x√≥a sau 30 gi√¢y
        scheduler.schedule(() -> otpStore.remove(email), 30, TimeUnit.SECONDS);

        return otp;
    }

    public boolean verifyOTP(String email, String userInputOtp) {
        String validOtp = otpStore.get(email);
        return validOtp != null && validOtp.equals(userInputOtp);
    }

    public boolean sendOtpForRegister(String recipientEmail, String otp) {
    try {
        String subject = "üîê M√£ OTP ƒëƒÉng k√Ω t√†i kho·∫£n - THEGIOICONGNGHE.COM";
        String htmlContent = """
            <div style="font-family:Arial,sans-serif;max-width:600px;margin:auto;border-radius:12px;
                        border:1px solid #ddd;overflow:hidden;box-shadow:0 4px 12px rgba(0,0,0,0.1);">
                <div style="background:#b71c1c;padding:20px;text-align:center;">
                    <h2 style="color:#fff;margin:0;font-size:24px;">THEGIOICONGNGHE.COM</h2>
                    <p style="color:#fbc02d;margin:8px 0 0;font-weight:bold;">X√°c minh t√†i kho·∫£n</p>
                </div>
                <div style="padding:30px 20px;background:#fff;">
                    <p style="font-size:16px;color:#333;">Ch√†o b·∫°n,</p>
                    <p style="font-size:16px;color:#333;">M√£ OTP c·ªßa b·∫°n ƒë·ªÉ <strong>t·∫°o t√†i kho·∫£n</strong> l√†:</p>
                    <div style="text-align:center;margin:30px 0;">
                        <span style="display:inline-block;background:#ffebee;color:#c62828;
                                     font-size:32px;font-weight:bold;padding:14px 28px;
                                     border-radius:8px;letter-spacing:6px;border:2px dashed #f44336;">
                            %s
                        </span>
                    </div>
                    <p style="font-size:14px;color:#555;text-align:center;">
                        M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong>. Kh√¥ng chia s·∫ª cho b·∫•t k·ª≥ ai.
                    </p>
                    <div style="margin-top:30px;border-top:1px solid #eee;padding-top:15px;">
                        <p style="font-size:12px;color:#888;text-align:center;">
                            ƒê√¢y l√† email t·ª± ƒë·ªông t·ª´ <strong>THEGIOICONGNGHE.COM</strong>.<br>
                            Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
                        </p>
                    </div>
                </div>
            </div>
            """.formatted(otp);

        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");

        Session session = Session.getInstance(props, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(EMAIL_SENDER, EMAIL_PASSWORD);
            }
        });

        Message message = new MimeMessage(session);
        message.setFrom(new InternetAddress(EMAIL_SENDER, "THEGIOICONGNGHE.COM"));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));
        message.setSubject(subject);
        message.setContent(htmlContent, "text/html; charset=utf-8");

        Transport.send(message);
        return true;

    } catch (Exception e) {
        e.printStackTrace();
        return false;
    }
}

public boolean sendOtpForResetPassword(String recipientEmail, String otp) {
    try {
        String subject = "üîê M√£ OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u - THEGIOICONGNGHE.COM";
        String htmlContent = """
            <div style="font-family:Arial,sans-serif;max-width:600px;margin:auto;border-radius:12px;
                        border:1px solid #ddd;overflow:hidden;box-shadow:0 4px 12px rgba(0,0,0,0.1);">
                <div style="background:#b71c1c;padding:20px;text-align:center;">
                    <h2 style="color:#fff;margin:0;font-size:24px;">THEGIOICONGNGHE.COM</h2>
                    <p style="color:#fbc02d;margin:8px 0 0;font-weight:bold;">X√°c minh t√†i kho·∫£n</p>
                </div>
                <div style="padding:30px 20px;background:#fff;">
                    <p style="font-size:16px;color:#333;">Ch√†o b·∫°n,</p>
                    <p style="font-size:16px;color:#333;">M√£ OTP c·ªßa b·∫°n ƒë·ªÉ <strong>kh√¥i ph·ª•c m·∫≠t kh·∫©u</strong> l√†:</p>
                    <div style="text-align:center;margin:30px 0;">
                        <span style="display:inline-block;background:#ffebee;color:#c62828;
                                     font-size:32px;font-weight:bold;padding:14px 28px;
                                     border-radius:8px;letter-spacing:6px;border:2px dashed #f44336;">
                            %s
                        </span>
                    </div>
                    <p style="font-size:14px;color:#555;text-align:center;">
                        M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong>. Kh√¥ng chia s·∫ª cho b·∫•t k·ª≥ ai.
                    </p>
                    <div style="margin-top:30px;border-top:1px solid #eee;padding-top:15px;">
                        <p style="font-size:12px;color:#888;text-align:center;">
                            ƒê√¢y l√† email t·ª± ƒë·ªông t·ª´ <strong>THEGIOICONGNGHE.COM</strong>.<br>
                            Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
                        </p>
                    </div>
                </div>
            </div>
            """.formatted(otp);

        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");

        Session session = Session.getInstance(props, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(EMAIL_SENDER, EMAIL_PASSWORD);
            }
        });

        Message message = new MimeMessage(session);
        message.setFrom(new InternetAddress(EMAIL_SENDER, "THEGIOICONGNGHE.COM"));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));
        message.setSubject(subject);
        message.setContent(htmlContent, "text/html; charset=utf-8");

        Transport.send(message);
        return true;

    } catch (Exception e) {
        e.printStackTrace();
        return false;
    }
}


    public boolean sendOrderConfirmation(User user, Order order, int orderID, List<OrderDetails> orderDetails, BigDecimal totalAmount) throws UnsupportedEncodingException {
        // Ki·ªÉm tra email tr∆∞·ªõc khi g·ª≠i
        if (user.getEmail() == null || user.getEmail().trim().isEmpty()) {
            System.out.println("Email kh√¥ng h·ª£p l·ªá: " + user.getEmail());
            return false;
        }

        try {
            Properties props = new Properties();
            props.put("mail.smtp.host", "smtp.gmail.com");
            props.put("mail.smtp.port", "587");
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.starttls.enable", "true");

            Session session = Session.getInstance(props, new Authenticator() {
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(EMAIL_SENDER, EMAIL_PASSWORD);
                }
            });

            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(EMAIL_SENDER, "THEGIOICONGNGHE.COM"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(user.getEmail()));
            message.setSubject("X√°c nh·∫≠n ƒë∆°n h√†ng #" + orderID);

            // N·ªôi dung email
            StringBuilder emailContent = new StringBuilder();
            emailContent.append("<h2>Ch√†o ").append(user.getFullName()).append(" y√™u d·∫•u,</h2>")
                    .append("<p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i!</p>")
                    .append("<p><b>M√£ ƒë∆°n h√†ng: #</b> ").append(orderID).append(".</p>")
                    .append("<p><b>T·ªïng ti·ªÅn:</b> ").append(totalAmount).append(" $.</p>")
                    .append("<h3>Chi ti·∫øt ƒë∆°n h√†ng:</h3>")
                    .append("<table border='1' cellpadding='8' cellspacing='0' style='border-collapse: collapse; width: 100%;'>")
                    .append("<tr style='background-color: #f2f2f2;'>")
                    .append("<th>·∫¢nh s·∫£n ph·∫©m</th><th>T√™n s·∫£n ph·∫©m</th><th>S·ªë l∆∞·ª£ng</th><th>Gi√°</th><th>T·ªïng</th></tr>");

            for (OrderDetails item : orderDetails) {
                // ProductVariant  product = productVariantService.getProductVariantById(item.getProductVariantID());
                emailContent.append("<tr>")
                        .append("<td><img src='")
                        // .append(product.getImgPath())
                        .append("' alt='·∫¢nh s·∫£n ph·∫©m' width='60' height='60'/></td>")
                        //    .append("<td>").append(product.getName()).append("</td>")
                        .append("<td>").append(item.getQuantity()).append("</td>")
                        //     .append("<td>").append(item.getPrice()).append(" VND</td>")
                        //    .append("<td>").append(item.getSubtotal()).append(" VND</td>")
                        .append("<tr>");
            }

            emailContent.append("</table>")
                    .append("<p>Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω ƒë∆°n h√†ng c·ªßa b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ.</p>")
                    .append("<p>Tr√¢n tr·ªçng,</p>")
                    .append("<p>C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!</p>")
                    .append("<p><b>ƒê·ªôi ng≈© h·ªó tr·ª£</b></p>");

            message.setContent(emailContent.toString(), "text/html; charset=UTF-8");

            Transport.send(message);
            return true;  // ‚úÖ G·ª≠i th√†nh c√¥ng
        } catch (MessagingException e) {
            e.printStackTrace();
            return false; // ‚ùå G·ª≠i th·∫•t b·∫°i
        }
    }

}
